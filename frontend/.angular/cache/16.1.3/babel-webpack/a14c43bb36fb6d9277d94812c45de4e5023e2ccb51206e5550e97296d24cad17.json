{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/api-service.service\";\nimport * as i2 from \"@angular/common\";\nfunction LedgerEntryComponent_option_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const v_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", v_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", v_r2.name, \" \");\n  }\n}\nfunction LedgerEntryComponent_tr_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 12)(1, \"th\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"th\");\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"th\");\n    i0.ɵɵtext(9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"th\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ledger_r3 = ctx.$implicit;\n    i0.ɵɵclassProp(\"red-background\", ledger_r3.amount < 0)(\"green-background\", ledger_r3.amount > 0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ledger_r3.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ledger_r3.destination.type);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(7, 9, ledger_r3.date, \"medium\"));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ledger_r3.amount);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ledger_r3.balance);\n  }\n}\nexport class LedgerEntryComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.ledgers = [];\n    this.balance = 0;\n    this.ledgerSelectValues = [{\n      id: 'complicatedLedger',\n      name: 'Complicated Ledger'\n    }, {\n      id: 'simpleLedger',\n      name: 'Simple Ledger'\n    }, {\n      id: 'duplicateLedger',\n      name: 'Duplicate Ledger'\n    }];\n    this.apiService = apiService;\n    // this.getSimpleLedger();\\\n    this.getComplicatedLedger();\n  }\n  selectorChanged(event) {\n    const ledgerType = event.target.value;\n    switch (ledgerType) {\n      case 'simpleLedger':\n        this.getSimpleLedger();\n        break;\n      case 'duplicateLedger':\n        this.getDuplicateLedger();\n        break;\n      case 'complicatedLedger':\n        this.getComplicatedLedger();\n        break;\n    }\n  }\n  getSimpleLedger() {\n    this.apiService.getSimpleLedger().subscribe(data => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n  getDuplicateLedger() {\n    this.apiService.getDuplicateLedger().subscribe(data => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n  getComplicatedLedger() {\n    this.apiService.getComplicatedLedger().subscribe(data => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n  updateBalance() {\n    this.balance = this.ledgers[this.ledgers.length - 1].balance;\n  }\n  // Filter and sort ledger data, as well as add appropriate descriptions to ledgers\n  prepareLedgerData(data) {\n    data = this.filterLedgerData(data);\n    data = this.sortLedgerData(data);\n    return data;\n  }\n  // Filter ledger data by removing duplicate ledgers\n  filterLedgerData(ledgerData) {\n    let activityIdTally = new Set();\n    return ledgerData.filter(ledgerEntry => {\n      console.log(activityIdTally);\n      console.log(ledgerEntry['activity_id']);\n      return !activityIdTally.has(ledgerEntry['activity_id']) && activityIdTally.add(ledgerEntry['activity_id']);\n    });\n  }\n  // Sort ledger data according to date, if date time is exactly same, Then show ledger entries in the order they result in valid\n  // transactino. i.e. the balance trail makes sense.\n  sortLedgerData(ledgerData) {\n    ledgerData.sort((first, second) => {\n      let firstDate = new Date(first.date);\n      let secondDate = new Date(second.date);\n      return firstDate < secondDate ? -1 : 1;\n    });\n    for (let i = 1; i < ledgerData.length; i++) {\n      let balance = ledgerData[i - 1].balance + ledgerData[i].amount;\n      if (balance != ledgerData[i].balance) {\n        let j = i + 1;\n        while (ledgerData[i].date == ledgerData[j].date) {\n          let balance = ledgerData[i - 1].balance + ledgerData[j].amount;\n          if (balance == ledgerData[j].balance) {\n            [ledgerData[i], ledgerData[j]] = [ledgerData[j], ledgerData[i]];\n            break;\n          }\n          j++;\n        }\n      }\n    }\n    return ledgerData;\n  }\n}\nLedgerEntryComponent.ɵfac = function LedgerEntryComponent_Factory(t) {\n  return new (t || LedgerEntryComponent)(i0.ɵɵdirectiveInject(i1.ApiServiceService));\n};\nLedgerEntryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LedgerEntryComponent,\n  selectors: [[\"app-ledger-entry\"]],\n  decls: 33,\n  vars: 3,\n  consts: [[1, \"outer-div\"], [1, \"bank-banner\"], [1, \"balance-entry\"], [1, \"account-bal\"], [1, \"bold-text\"], [1, \"small\", \"period-text\"], [1, \"ledger-selector\"], [\"name\", \"ledger-selector\", \"id\", \"ledger-selector\", 3, \"change\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"content\"], [\"class\", \"data-rows\", 3, \"red-background\", \"green-background\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [1, \"data-rows\"]],\n  template: function LedgerEntryComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"EquityList Bank\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"h1\");\n      i0.ɵɵtext(6, \" Your investing account: \");\n      i0.ɵɵelementStart(7, \"span\", 4);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(9, \" available \");\n      i0.ɵɵelementStart(10, \"div\", 5);\n      i0.ɵɵtext(11, \" Period: \");\n      i0.ɵɵelementStart(12, \"span\", 4);\n      i0.ɵɵtext(13, \"08/19/2014 - 10/15/2014\");\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(14, \"div\", 6)(15, \"select\", 7);\n      i0.ɵɵlistener(\"change\", function LedgerEntryComponent_Template_select_change_15_listener($event) {\n        return ctx.selectorChanged($event);\n      });\n      i0.ɵɵtemplate(16, LedgerEntryComponent_option_16_Template, 2, 2, \"option\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(17, \"div\", 9)(18, \"table\")(19, \"thead\")(20, \"tr\")(21, \"th\");\n      i0.ɵɵtext(22, \"Type\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(23, \"th\");\n      i0.ɵɵtext(24, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"th\");\n      i0.ɵɵtext(26, \"Date\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"th\");\n      i0.ɵɵtext(28, \"Amount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(29, \"th\");\n      i0.ɵɵtext(30, \"Balance\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(31, \"tbody\");\n      i0.ɵɵtemplate(32, LedgerEntryComponent_tr_32_Template, 12, 12, \"tr\", 10);\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\"$ \", ctx.balance, \"\");\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ledgerSelectValues);\n      i0.ɵɵadvance(16);\n      i0.ɵɵproperty(\"ngForOf\", ctx.ledgers);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.DatePipe],\n  styles: [\".outer-div[_ngcontent-%COMP%] {\\n  max-width: 100%;\\n}\\n\\nh1[_ngcontent-%COMP%] {\\n  font-size: 2em;\\n  font-weight: 300;\\n  text-align: center;\\n}\\n\\n.balance-entry[_ngcontent-%COMP%] {\\n  border-radius: 40px;\\n  padding-left: 40px;\\n  margin: 20px 60px;\\n  \\n\\n  box-shadow: 0 3px rgba(0, 0, 0, 0.5);\\n}\\n\\n.bank-banner[_ngcontent-%COMP%] {\\n  background-color: antiquewhite;\\n  padding: 20px 40px;\\n  margin-top: 0px;\\n}\\n\\n.account-bal[_ngcontent-%COMP%] {\\n  width: 100%;\\n  display: inline-block;\\n}\\n\\n.ledger-selector[_ngcontent-%COMP%] {\\n  display: inline-block;\\n  padding: 10px;\\n  margin-left: 60px;\\n  width: auto;\\n  align-items: center;\\n}\\n\\n.ledger-selector[_ngcontent-%COMP%]   select[_ngcontent-%COMP%] {\\n  align-items: center;\\n  padding: 15px 20px 15px 15px;\\n}\\n\\n.period-text[_ngcontent-%COMP%] {\\n  margin-top: 20px;\\n}\\n\\n.data-rows[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-weight: 100;\\n}\\n\\n.bold-text[_ngcontent-%COMP%] {\\n  font-weight: bold;\\n}\\n\\nh1[_ngcontent-%COMP%]    > .small[_ngcontent-%COMP%] {\\n  font-size: 0.5em;\\n  font-weight: 300;\\n  color: #999;\\n}\\n\\n.content[_ngcontent-%COMP%] {\\n  border-radius: 40px;\\n  padding: 20px 40px;\\n  margin: 20px 60px;\\n  \\n\\n  box-shadow: 0px 3px rgba(0, 0, 0, 0.5);\\n}\\n\\ntable[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\ntable[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   th[_ngcontent-%COMP%] {\\n  font-size: 28px;\\n  border-bottom: 2px solid black;\\n  border-radius: 60px;\\n}\\n\\ntable[_ngcontent-%COMP%]   thead[_ngcontent-%COMP%] {\\n  border: 5px solid gray;\\n}\\n\\ntable[_ngcontent-%COMP%]   tbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n  padding-top: 20px;\\n}\\n\\nth[_ngcontent-%COMP%], td[_ngcontent-%COMP%] {\\n  padding-top: 20px;\\n  padding-bottom: 20px;\\n  padding-left: 20px;\\n  padding-right: 20px;\\n  font-weight: bold;\\n}\\n\\n\\n\\n\\n\\n\\n.red-background[_ngcontent-%COMP%] {\\n  background-color: #fff2f2;\\n}\\n\\n.green-background[_ngcontent-%COMP%] {\\n  background-color: #edfdfd;\\n}\\n\\ntbody[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]:hover {\\n  background-color: #fff;\\n}\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbGVkZ2VyLWVudHJ5L2xlZGdlci1lbnRyeS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGNBQWM7RUFDZCxnQkFBZ0I7RUFDaEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsNkJBQTZCO0VBQzdCLG9DQUFvQztBQUN0Qzs7QUFFQTtFQUNFLDhCQUE4QjtFQUM5QixrQkFBa0I7RUFDbEIsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSxxQkFBcUI7RUFDckIsYUFBYTtFQUNiLGlCQUFpQjtFQUNqQixXQUFXO0VBQ1gsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLDRCQUE0QjtBQUM5Qjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsV0FBVztBQUNiOztBQUVBO0VBQ0UsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQixpQkFBaUI7RUFDakIsOEJBQThCO0VBQzlCLHNDQUFzQztBQUN4Qzs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGVBQWU7RUFDZiw4QkFBOEI7RUFDOUIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBOztFQUVFLGlCQUFpQjtFQUNqQixvQkFBb0I7RUFDcEIsa0JBQWtCO0VBQ2xCLG1CQUFtQjtFQUNuQixpQkFBaUI7QUFDbkI7QUFDQTs7O0dBR0c7O0FBRUg7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxzQkFBc0I7QUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyIub3V0ZXItZGl2IHtcclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbn1cclxuXHJcbmgxIHtcclxuICBmb250LXNpemU6IDJlbTtcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLmJhbGFuY2UtZW50cnkge1xyXG4gIGJvcmRlci1yYWRpdXM6IDQwcHg7XHJcbiAgcGFkZGluZy1sZWZ0OiA0MHB4O1xyXG4gIG1hcmdpbjogMjBweCA2MHB4O1xyXG4gIC8qIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrOyAqL1xyXG4gIGJveC1zaGFkb3c6IDAgM3B4IHJnYmEoMCwgMCwgMCwgMC41KTtcclxufVxyXG5cclxuLmJhbmstYmFubmVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhbnRpcXVld2hpdGU7XHJcbiAgcGFkZGluZzogMjBweCA0MHB4O1xyXG4gIG1hcmdpbi10b3A6IDBweDtcclxufVxyXG5cclxuLmFjY291bnQtYmFsIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbn1cclxuXHJcbi5sZWRnZXItc2VsZWN0b3Ige1xyXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIG1hcmdpbi1sZWZ0OiA2MHB4O1xyXG4gIHdpZHRoOiBhdXRvO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5sZWRnZXItc2VsZWN0b3Igc2VsZWN0IHtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHBhZGRpbmc6IDE1cHggMjBweCAxNXB4IDE1cHg7XHJcbn1cclxuXHJcbi5wZXJpb2QtdGV4dCB7XHJcbiAgbWFyZ2luLXRvcDogMjBweDtcclxufVxyXG5cclxuLmRhdGEtcm93cyB0aCB7XHJcbiAgZm9udC13ZWlnaHQ6IDEwMDtcclxufVxyXG5cclxuLmJvbGQtdGV4dCB7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuXHJcbmgxID4gLnNtYWxsIHtcclxuICBmb250LXNpemU6IDAuNWVtO1xyXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XHJcbiAgY29sb3I6ICM5OTk7XHJcbn1cclxuXHJcbi5jb250ZW50IHtcclxuICBib3JkZXItcmFkaXVzOiA0MHB4O1xyXG4gIHBhZGRpbmc6IDIwcHggNDBweDtcclxuICBtYXJnaW46IDIwcHggNjBweDtcclxuICAvKiBib3JkZXI6IDJweCBkYXNoZWQgYmxhY2s7ICovXHJcbiAgYm94LXNoYWRvdzogMHB4IDNweCByZ2JhKDAsIDAsIDAsIDAuNSk7XHJcbn1cclxuXHJcbnRhYmxlIHtcclxuICB3aWR0aDogMTAwJTtcclxufVxyXG5cclxudGFibGUgdGhlYWQgdHIgdGgge1xyXG4gIGZvbnQtc2l6ZTogMjhweDtcclxuICBib3JkZXItYm90dG9tOiAycHggc29saWQgYmxhY2s7XHJcbiAgYm9yZGVyLXJhZGl1czogNjBweDtcclxufVxyXG5cclxudGFibGUgdGhlYWQge1xyXG4gIGJvcmRlcjogNXB4IHNvbGlkIGdyYXk7XHJcbn1cclxuXHJcbnRhYmxlIHRib2R5IHRyIHtcclxuICBwYWRkaW5nLXRvcDogMjBweDtcclxufVxyXG5cclxudGgsXHJcbnRkIHtcclxuICBwYWRkaW5nLXRvcDogMjBweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMjBweDtcclxuICBwYWRkaW5nLWxlZnQ6IDIwcHg7XHJcbiAgcGFkZGluZy1yaWdodDogMjBweDtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG4vKiBcclxudHI6bnRoLWNoaWxkKGV2ZW4pIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjMxLCAyMzEsIDIzMSk7XHJcbn0gKi9cclxuXHJcbi5yZWQtYmFja2dyb3VuZCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZjJmMjtcclxufVxyXG5cclxuLmdyZWVuLWJhY2tncm91bmQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZGZkZmQ7XHJcbn1cclxuXHJcbnRib2R5IHRyOmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","v_r2","id","ɵɵadvance","ɵɵtextInterpolate1","name","ɵɵclassProp","ledger_r3","amount","ɵɵtextInterpolate","type","destination","ɵɵpipeBind2","date","balance","LedgerEntryComponent","constructor","apiService","ledgers","ledgerSelectValues","getComplicatedLedger","selectorChanged","event","ledgerType","target","value","getSimpleLedger","getDuplicateLedger","subscribe","data","console","log","prepareLedgerData","updateBalance","length","filterLedgerData","sortLedgerData","ledgerData","activityIdTally","Set","filter","ledgerEntry","has","add","sort","first","second","firstDate","Date","secondDate","i","j","ɵɵdirectiveInject","i1","ApiServiceService","selectors","decls","vars","consts","template","LedgerEntryComponent_Template","rf","ctx","ɵɵlistener","LedgerEntryComponent_Template_select_change_15_listener","$event","ɵɵtemplate","LedgerEntryComponent_option_16_Template","LedgerEntryComponent_tr_32_Template"],"sources":["C:\\Users\\Tanishka\\Downloads\\EquityList Assignment\\equityListSubmission\\frontend\\src\\app\\ledger-entry\\ledger-entry.component.ts","C:\\Users\\Tanishka\\Downloads\\EquityList Assignment\\equityListSubmission\\frontend\\src\\app\\ledger-entry\\ledger-entry.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ApiServiceService } from '../services/api-service.service';\n\n@Component({\n  selector: 'app-ledger-entry',\n  templateUrl: './ledger-entry.component.html',\n  styleUrls: ['./ledger-entry.component.css'],\n})\nexport class LedgerEntryComponent {\n  ledgers: any = [];\n  balance: Number = 0;\n  ledgerSelectValues = [\n    { id: 'complicatedLedger', name: 'Complicated Ledger' },\n    { id: 'simpleLedger', name: 'Simple Ledger' },\n    { id: 'duplicateLedger', name: 'Duplicate Ledger' },\n  ];\n  constructor(public apiService: ApiServiceService) {\n    this.apiService = apiService;\n    // this.getSimpleLedger();\\\n    this.getComplicatedLedger();\n  }\n\n  selectorChanged(event: any) {\n    const ledgerType = event.target.value;\n    switch (ledgerType) {\n      case 'simpleLedger':\n        this.getSimpleLedger();\n        break;\n      case 'duplicateLedger':\n        this.getDuplicateLedger();\n        break;\n      case 'complicatedLedger':\n        this.getComplicatedLedger();\n        break;\n    }\n  }\n\n  getSimpleLedger() {\n    this.apiService.getSimpleLedger().subscribe((data: any) => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n\n  getDuplicateLedger() {\n    this.apiService.getDuplicateLedger().subscribe((data: any) => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n\n  getComplicatedLedger() {\n    this.apiService.getComplicatedLedger().subscribe((data: any) => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n\n  updateBalance() {\n    this.balance = this.ledgers[this.ledgers.length - 1].balance;\n  }\n\n  // Filter and sort ledger data, as well as add appropriate descriptions to ledgers\n  prepareLedgerData(data: any) {\n    data = this.filterLedgerData(data);\n\n    data = this.sortLedgerData(data);\n\n    return data;\n  }\n\n  // Filter ledger data by removing duplicate ledgers\n  filterLedgerData(ledgerData: any) {\n    let activityIdTally: any = new Set();\n    return ledgerData.filter((ledgerEntry: any) => {\n      console.log(activityIdTally);\n      console.log(ledgerEntry['activity_id']);\n\n      return (\n        !activityIdTally.has(ledgerEntry['activity_id']) &&\n        activityIdTally.add(ledgerEntry['activity_id'])\n      );\n    });\n  }\n\n  // Sort ledger data according to date, if date time is exactly same, Then show ledger entries in the order they result in valid\n  // transactino. i.e. the balance trail makes sense.\n  sortLedgerData(ledgerData: any) {\n    ledgerData.sort((first: any, second: any) => {\n      let firstDate = new Date(first.date);\n      let secondDate = new Date(second.date);\n\n      return firstDate < secondDate ? -1 : 1;\n    });\n\n    for (let i = 1; i < ledgerData.length; i++) {\n      let balance = ledgerData[i - 1].balance + ledgerData[i].amount;\n\n      if (balance != ledgerData[i].balance) {\n        let j = i + 1;\n        while (ledgerData[i].date == ledgerData[j].date) {\n          let balance = ledgerData[i - 1].balance + ledgerData[j].amount;\n          if (balance == ledgerData[j].balance) {\n            [ledgerData[i], ledgerData[j]] = [ledgerData[j], ledgerData[i]];\n            break;\n          }\n          j++;\n        }\n      }\n    }\n\n    return ledgerData;\n  }\n}\n","<div class=\"outer-div\">\n  <h1 class=\"bank-banner\">EquityList Bank</h1>\n  <div class=\"balance-entry\">\n    <div class=\"account-bal\">\n      <h1>\n        Your investing account:\n        <span class=\"bold-text\">$ {{ balance }}</span> available\n        <div class=\"small period-text\">\n          Period: <span class=\"bold-text\">08/19/2014 - 10/15/2014</span>\n        </div>\n      </h1>\n    </div>\n  </div>\n\n  <div class=\"ledger-selector\">\n    <select\n      name=\"ledger-selector\"\n      id=\"ledger-selector\"\n      (change)=\"selectorChanged($event)\"\n    >\n      <option *ngFor=\"let v of ledgerSelectValues\" [value]=\"v.id\">\n        {{ v.name }}\n      </option>\n    </select>\n  </div>\n\n  <div class=\"content\">\n    <table>\n      <thead>\n        <tr>\n          <th>Type</th>\n          <th>Description</th>\n          <th>Date</th>\n          <th>Amount</th>\n          <th>Balance</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        <!-- Table code goes here -->\n        <tr\n          class=\"data-rows\"\n          *ngFor=\"let ledger of ledgers\"\n          [class.red-background]=\"ledger.amount < 0\"\n          [class.green-background]=\"ledger.amount > 0\"\n        >\n          <th>{{ ledger.type }}</th>\n          <th>{{ ledger.destination.type }}</th>\n          <th>{{ ledger.date | date : \"medium\" }}</th>\n          <th>{{ ledger.amount }}</th>\n          <th>{{ ledger.balance }}</th>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}