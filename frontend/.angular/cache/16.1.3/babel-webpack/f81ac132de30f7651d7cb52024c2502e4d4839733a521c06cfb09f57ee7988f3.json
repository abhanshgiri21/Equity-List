{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let LedgerEntryComponent = class LedgerEntryComponent {\n  constructor(apiService) {\n    this.apiService = apiService;\n    this.ledgers = [];\n    this.balance = 0;\n    this.ledgerSelectValues = [{\n      id: 'complicatedLedger',\n      name: 'Complicated Ledger'\n    }, {\n      id: 'simpleLedger',\n      name: 'Simple Ledger'\n    }, {\n      id: 'duplicateLedger',\n      name: 'Duplicate Ledger'\n    }];\n    this.apiService = apiService;\n    // this.getSimpleLedger();\\\n    this.getComplicatedLedger();\n  }\n  selectorChanged(event) {\n    const ledgerType = event.target.value;\n    switch (ledgerType) {\n      case 'simpleLedger':\n        this.getSimpleLedger();\n        break;\n      case 'duplicateLedger':\n        this.getDuplicateLedger();\n        break;\n      case 'complicatedLedger':\n        this.getComplicatedLedger();\n        break;\n    }\n  }\n  getSimpleLedger() {\n    this.apiService.getSimpleLedger().subscribe(data => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n  getDuplicateLedger() {\n    this.apiService.getDuplicateLedger().subscribe(data => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n  getComplicatedLedger() {\n    this.apiService.getComplicatedLedger().subscribe(data => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n  updateBalance() {\n    this.balance = this.ledgers[this.ledgers.length - 1].balance;\n  }\n  // Filter and sort ledger data, as well as add appropriate descriptions to ledgers\n  prepareLedgerData(data) {\n    data = this.filterLedgerData(data);\n    data = this.sortLedgerData(data);\n    return data;\n  }\n  // Filter ledger data by removing duplicate ledgers\n  filterLedgerData(ledgerData) {\n    let activityIdTally = new Set();\n    return ledgerData.filter(ledgerEntry => {\n      console.log(activityIdTally);\n      console.log(ledgerEntry['activity_id']);\n      return !activityIdTally.has(ledgerEntry['activity_id']) && activityIdTally.add(ledgerEntry['activity_id']);\n    });\n  }\n  // Sort ledger data according to date, if date time is exactly same, Then show ledger entries in the order they result in valid\n  // transactino. i.e. the balance trail makes sense.\n  sortLedgerData(ledgerData) {\n    ledgerData.sort((first, second) => {\n      let firstDate = new Date(first.date);\n      let secondDate = new Date(second.date);\n      return firstDate < secondDate ? -1 : 1;\n    });\n    for (let i = 1; i < ledgerData.length; i++) {\n      let balance = ledgerData[i - 1].balance + ledgerData[i].amount;\n      if (balance != ledgerData[i].balance) {\n        let j = i + 1;\n        while (ledgerData[i].date == ledgerData[j].date) {\n          let balance = ledgerData[i - 1].balance + ledgerData[j].amount;\n          if (balance == ledgerData[j].balance) {\n            [ledgerData[i], ledgerData[j]] = [ledgerData[j], ledgerData[i]];\n            break;\n          }\n          j++;\n        }\n      }\n    }\n    return ledgerData;\n  }\n};\nLedgerEntryComponent = __decorate([Component({\n  selector: 'app-ledger-entry',\n  templateUrl: './ledger-entry.component.html',\n  styleUrls: ['./ledger-entry.component.css']\n})], LedgerEntryComponent);","map":{"version":3,"names":["Component","LedgerEntryComponent","constructor","apiService","ledgers","balance","ledgerSelectValues","id","name","getComplicatedLedger","selectorChanged","event","ledgerType","target","value","getSimpleLedger","getDuplicateLedger","subscribe","data","console","log","prepareLedgerData","updateBalance","length","filterLedgerData","sortLedgerData","ledgerData","activityIdTally","Set","filter","ledgerEntry","has","add","sort","first","second","firstDate","Date","date","secondDate","i","amount","j","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Tanishka\\Downloads\\EquityList Assignment\\equityListSubmission\\frontend\\src\\app\\ledger-entry\\ledger-entry.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ApiServiceService } from '../services/api-service.service';\n\n@Component({\n  selector: 'app-ledger-entry',\n  templateUrl: './ledger-entry.component.html',\n  styleUrls: ['./ledger-entry.component.css'],\n})\nexport class LedgerEntryComponent {\n  ledgers: any = [];\n  balance: Number = 0;\n  ledgerSelectValues = [\n    { id: 'complicatedLedger', name: 'Complicated Ledger' },\n    { id: 'simpleLedger', name: 'Simple Ledger' },\n    { id: 'duplicateLedger', name: 'Duplicate Ledger' },\n  ];\n  constructor(public apiService: ApiServiceService) {\n    this.apiService = apiService;\n    // this.getSimpleLedger();\\\n    this.getComplicatedLedger();\n  }\n\n  selectorChanged(event: any) {\n    const ledgerType = event.target.value;\n    switch (ledgerType) {\n      case 'simpleLedger':\n        this.getSimpleLedger();\n        break;\n      case 'duplicateLedger':\n        this.getDuplicateLedger();\n        break;\n      case 'complicatedLedger':\n        this.getComplicatedLedger();\n        break;\n    }\n  }\n\n  getSimpleLedger() {\n    this.apiService.getSimpleLedger().subscribe((data: any) => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n\n  getDuplicateLedger() {\n    this.apiService.getDuplicateLedger().subscribe((data: any) => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n\n  getComplicatedLedger() {\n    this.apiService.getComplicatedLedger().subscribe((data: any) => {\n      console.log('called api');\n      console.log(data);\n      this.ledgers = this.prepareLedgerData(data);\n      this.updateBalance();\n    });\n  }\n\n  updateBalance() {\n    this.balance = this.ledgers[this.ledgers.length - 1].balance;\n  }\n\n  // Filter and sort ledger data, as well as add appropriate descriptions to ledgers\n  prepareLedgerData(data: any) {\n    data = this.filterLedgerData(data);\n\n    data = this.sortLedgerData(data);\n\n    return data;\n  }\n\n  // Filter ledger data by removing duplicate ledgers\n  filterLedgerData(ledgerData: any) {\n    let activityIdTally: any = new Set();\n    return ledgerData.filter((ledgerEntry: any) => {\n      console.log(activityIdTally);\n      console.log(ledgerEntry['activity_id']);\n\n      return (\n        !activityIdTally.has(ledgerEntry['activity_id']) &&\n        activityIdTally.add(ledgerEntry['activity_id'])\n      );\n    });\n  }\n\n  // Sort ledger data according to date, if date time is exactly same, Then show ledger entries in the order they result in valid\n  // transactino. i.e. the balance trail makes sense.\n  sortLedgerData(ledgerData: any) {\n    ledgerData.sort((first: any, second: any) => {\n      let firstDate = new Date(first.date);\n      let secondDate = new Date(second.date);\n\n      return firstDate < secondDate ? -1 : 1;\n    });\n\n    for (let i = 1; i < ledgerData.length; i++) {\n      let balance = ledgerData[i - 1].balance + ledgerData[i].amount;\n\n      if (balance != ledgerData[i].balance) {\n        let j = i + 1;\n        while (ledgerData[i].date == ledgerData[j].date) {\n          let balance = ledgerData[i - 1].balance + ledgerData[j].amount;\n          if (balance == ledgerData[j].balance) {\n            [ledgerData[i], ledgerData[j]] = [ledgerData[j], ledgerData[i]];\n            break;\n          }\n          j++;\n        }\n      }\n    }\n\n    return ledgerData;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}